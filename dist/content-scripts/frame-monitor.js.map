{
  "version": 3,
  "sources": ["../../src/content-scripts/frame-monitor.ts"],
  "sourcesContent": ["//import browser from \"webextension-polyfill\";\n\n// import browser from \"webextension-polyfill\";\n// declare const browser: typeof import(\"webextension-polyfill\");\n// frame-monitor.ts - Content script for frame monitoring\n\nconsole.log(\"[ARGOS:CS] frame monitor mounted\");\nexport const frameMonitorContentScript = function () {\n  console.log(\"[ARGOS:CS] frame monitor running\");\n  const VISIBILITY_CHECK_INTERVAL = 10000; // 1 second\n\n  function isStyleHidden(element: HTMLElement): boolean {\n    const style = window.getComputedStyle(element);\n    return (\n      style.display === \"none\" ||\n      style.visibility === \"hidden\" ||\n      style.opacity === \"0\" ||\n      style.width === \"0px\" ||\n      style.height === \"0px\"\n    );\n  }\n\n  function isOffscreen(rect: DOMRect): boolean {\n    // Check if element is completely off-screen\n    return (\n      rect.right <= 0 ||\n      rect.bottom <= 0 ||\n      rect.left >= window.innerWidth ||\n      rect.top >= window.innerHeight\n    );\n  }\n\n  function hasZeroDimension(element: HTMLElement): boolean {\n    return element.offsetWidth <= 0 || element.offsetHeight <= 0;\n  }\n\n  function isParentHidden(element: HTMLElement): boolean {\n    let parent = element.parentElement;\n    while (parent) {\n      if (isStyleHidden(parent)) {\n        return true;\n      }\n      parent = parent.parentElement;\n    }\n    return false;\n  }\n\n  function hasVisibleArea(element: HTMLElement): boolean {\n    const rects = element.getClientRects();\n    if (!rects || rects.length === 0) {\n      return false;\n    }\n\n    // Check if any rect has a meaningful area\n    for (let i = 0; i < rects.length; i++) {\n      const rect = rects[i];\n      if (rect.width > 0 && rect.height > 0 && !isOffscreen(rect)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function checkFrameVisibility(frame: HTMLIFrameElement): boolean {\n    try {\n      // 1. Basic style checks\n      if (isStyleHidden(frame)) {\n        return false;\n      }\n\n      // 2. Check parent elements\n      if (isParentHidden(frame)) {\n        return false;\n      }\n\n      // 3. Check dimensions\n      if (hasZeroDimension(frame)) {\n        return false;\n      }\n\n      // 4. Check if frame has any visible rectangles\n      if (!hasVisibleArea(frame)) {\n        return false;\n      }\n\n      // 5. Try to check frame content if same-origin\n      try {\n        const frameDoc = frame.contentDocument;\n        if (frameDoc && frameDoc.body) {\n          if (hasZeroDimension(frameDoc.body)) {\n            return false;\n          }\n        }\n      } catch (e) {\n        // Cross-origin access will fail - that's okay\n        // We'll rely on the other checks in this case\n      }\n\n      // Additional checks for specific scenarios\n      const rect = frame.getBoundingClientRect();\n\n      // Check if frame is too small to be meaningful\n      if (rect.width < 2 && rect.height < 2) {\n        return false;\n      }\n\n      // Check if frame is covered by other elements\n      const centerX = rect.left + rect.width / 2;\n      const centerY = rect.top + rect.height / 2;\n      const elementAtPoint = document.elementFromPoint(centerX, centerY);\n      if (\n        elementAtPoint &&\n        !frame.contains(elementAtPoint) &&\n        !elementAtPoint.contains(frame)\n      ) {\n        // Something else is covering the center of the frame\n        // But only consider it hidden if a significant portion is covered\n        const coverageThreshold = 0.9; // 90% coverage to consider hidden\n        const elementsAtCorners = [\n          document.elementFromPoint(rect.left + 2, rect.top + 2),\n          document.elementFromPoint(rect.right - 2, rect.top + 2),\n          document.elementFromPoint(rect.left + 2, rect.bottom - 2),\n          document.elementFromPoint(rect.right - 2, rect.bottom - 2),\n        ];\n\n        const coveredCorners = elementsAtCorners.filter(\n          (el) => el && !frame.contains(el) && !el.contains(frame)\n        ).length;\n\n        if (coveredCorners >= 3) {\n          // If 3 or more corners are covered\n          return false;\n        }\n      }\n\n      console.log(\"[ARGOS:CS] checkFrameVisibility: true\");\n      return true;\n    } catch (error) {\n      console.warn(\"Error checking frame visibility:\", error);\n      // In case of error, default to considering it visible\n      return true;\n    }\n  }\n\n  function setupFrameMonitoring() {\n    // Track all iframes\n    const frames = new Map<HTMLIFrameElement, boolean>();\n\n    console.log(\"[ARGOS:CS] setupFrameMonitoring\");\n    // Initial frame discovery\n    document.querySelectorAll(\"iframe\").forEach((frame) => {\n      console.log(\"[ARGOS:CS] setupFrameMonitoring: initial frame discovery\");\n      frames.set(\n        frame as HTMLIFrameElement,\n        checkFrameVisibility(frame as HTMLIFrameElement)\n      );\n    });\n\n    // Set up mutation observer for frame changes\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        mutation.addedNodes.forEach((node) => {\n          if (node instanceof HTMLIFrameElement) {\n            console.log(\n              \"[ARGOS:CS] mutation : added node, checking frame visibility\"\n            );\n            frames.set(node, checkFrameVisibility(node));\n          }\n        });\n\n        mutation.removedNodes.forEach((node) => {\n          if (node instanceof HTMLIFrameElement) {\n            console.log(\"[ARGOS:CS] mutation : removed node\");\n            frames.delete(node);\n          }\n        });\n      });\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n    });\n\n    // Monitor visibility changes\n    const intersectionObserver = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.target instanceof HTMLIFrameElement) {\n            const frame = entry.target;\n            console.log(\n              \"[ARGOS:CS] intersection observer : checking frame visibility\"\n            );\n            const isVisible = checkFrameVisibility(frame);\n\n            if (frames.get(frame) !== isVisible) {\n              frames.set(frame, isVisible);\n              chrome.runtime.sendMessage({\n                type: \"frameVisibilityChange\",\n                frameId: frame.src,\n                visible: isVisible,\n              });\n            }\n          }\n        });\n      },\n      {\n        threshold: [0, 0.1, 0.5, 1.0], // Check at different visibility thresholds\n      }\n    );\n\n    // Periodic visibility checking for other cases\n    setInterval(() => {\n      frames.forEach((oldVisible, frame) => {\n        const newVisible = checkFrameVisibility(frame);\n        console.log(`[ARGOS:CS:${frame.id}] periodic visibility checking`, {\n          src: frame.src,\n          visible: newVisible,\n        });\n        if (oldVisible !== newVisible) {\n          console.log(`[ARGOS:CS:${frame.id}] found visibility change!`);\n          frames.set(frame, newVisible);\n          chrome.runtime.sendMessage({\n            type: \"frameVisibilityChange\",\n            frameId: frame.src,\n            visible: newVisible,\n          });\n        }\n      });\n    }, VISIBILITY_CHECK_INTERVAL);\n\n    return {\n      success: true,\n      frames: Array.from(frames, ([key, value]) => ({\n        frameId: key.src,\n        visible: value,\n      })),\n    };\n  }\n\n  return setupFrameMonitoring();\n};\n\nexport const diagnosticScript = function () {\n  console.log(\"[ARGOS:CS] Diagnostic running\");\n  console.log(\"[ARGOS:CS] Window location:\", window.location.href);\n  console.log(\"[ARGOS:CS] Document readyState:\", document.readyState);\n\n  // Test if browser API is available\n  if (typeof chrome !== \"undefined\") {\n    console.log(\"[ARGOS:CS] browser API is available\");\n    chrome.runtime\n      .sendMessage({\n        type: \"diagnostic\",\n        message: \"Diagnostic script successfully ran\",\n      })\n      .catch((e) => console.log(\"[ARGOS:CS] Failed to send message:\", e));\n  } else {\n    console.log(\"[ARGOS:CS] browser API is NOT available!\");\n  }\n\n  return {\n    success: true,\n    iframes: document.getElementsByTagName(\"iframe\").length,\n  };\n};\n"],
  "mappings": "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",
  "names": []
}
